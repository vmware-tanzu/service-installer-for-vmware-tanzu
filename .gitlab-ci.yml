# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

variables:
  test_dir: ${CI_PROJECT_DIR}

stages:
  - postlintcheck
  - uisecuritycheck
  - besecuritycheck
  - coverityscan
  - sonarqube

postlintcheck:
  stage: postlintcheck
  tags:
    - sivt-runner
  before_script:
    - cd ${test_dir}
    - export PATH=$PATH:/home/gitlab-runner/.local/bin
    - pip install virtualenv
    - virtualenv -p python pyenv
    - source pyenv/bin/activate
    - pre-commit install
    - pre-commit install-hooks

  script:
    - git fetch --all
    - FILES=$(git diff --name-only ${CI_COMMIT_SHA} origin/${CI_MERGE_REQUEST_TARGET_BRANCH_NAME})
    - pre-commit run --files $FILES

  only:
    refs:
      - merge_requests
  allow_failure: false

uisecuritycheck:
  stage: uisecuritycheck
  tags:
    - sivt-runner
  before_script:
    - cd ${test_dir}

  script:
    - grype ${test_dir}/ui

  only:
    refs:
      - merge_requests
  allow_failure: false

besecuritycheck:
  stage: besecuritycheck
  tags:
    - sivt-runner
  before_script:
    - cd ${test_dir}

  script:
    - grype ${test_dir} --exclude './ui/*'

  only:
    refs:
      - merge_requests
  allow_failure: true

coverityscan:
  stage: coverityscan
  tags:
    - sivt-runner
  before_script:
    - pip install virtualenv
    - virtualenv -p python coverityEnv
    - source coverityEnv/bin/activate
    - pip install requests
  script:
    - python ${test_dir}/coverity_scan.py --view 65870 --project 11302
  only:
    refs:
      - merge_requests
  allow_failure: true

coverity-run-job:
  stage: coverityscan
  variables:
    GIT_STRATEGY: fetch
  tags:
    - sivt-runner
  before_script:
    - pip install virtualenv
    - virtualenv -p python coverityEnv
    - source coverityEnv/bin/activate
    - pip install requests
    - rm -rf ~/report
    - export PATH=$PATH:/usr/local/cov-analysis-linux64-2023.3.0/bin
  script:
    - cov-capture --dir ~/report --project-dir ${test_dir}
    - cov-analyze --dir ~/report --webapp-security --strip-path ${test_dir}
    - cov-commit-defects --host coverity.eng.vmware.com --dataport 9090 --stream BID__2229__Project_Arcas --auth-key-file ~/auth-key.txt --dir ~/report
    - python ${test_dir}/coverity_scan.py --view 65870 --project 11302
  timeout: 5 hours 30 minutes
  only:
    refs:
      - master
    variables:
      - $suite == 'coverity-scan-pipeline'

sonarqube-check:
  stage : sonarqube
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    GIT_DEPTH: "0"
  tags:
    - sivt-runner
  before_script:
    - export PATH=$PATH:/usr/local/bin/sonar-scanner
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner
  allow_failure: true
  only:
    - master
