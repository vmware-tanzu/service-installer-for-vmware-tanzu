#@ load("@ytt:overlay", "overlay")
#@ load("@ytt:data", "data")
#@ load("lib/validate.star", "validate_configuration")

#@ validate_configuration("tkgs")

#@overlay/match by=overlay.subset({"kind":"TanzuKubernetesCluster"})
---
apiVersion: run.tanzu.vmware.com/v1alpha1
kind: TanzuKubernetesCluster
metadata:
  name: #@ data.values.CLUSTER_NAME
  namespace: #@ data.values.NAMESPACE
  labels:
    #@overlay/match missing_ok=True
    #@yaml/text-templated-strings
    #@ if data.values.TKG_CLUSTER_ROLE != "workload":
    cluster-role.tkg.tanzu.vmware.com/(@= data.values.TKG_CLUSTER_ROLE @): ""
    #@ end
    tkg.tanzu.vmware.com/cluster-name: #@ data.values.CLUSTER_NAME
spec:
  distribution:
    version: #@ data.values.KUBERNETES_VERSION
  settings:
    network:
      cni:
        name: #@ data.values.CNI
      pods:
        cidrBlocks:
        #@overlay/match by=overlay.index(0)
        - #@ data.values.CLUSTER_CIDR
      serviceDomain: #@ data.values.SERVICE_DOMAIN
      services:
        cidrBlocks:
        #@overlay/match by=overlay.index(0)
        - #@ data.values.SERVICE_CIDR
    storage:
#@ if data.values.STORAGE_CLASSES != "" and data.values.STORAGE_CLASSES != None:
      #@overlay/replace
      classes:
#@ storage_classes = data.values.STORAGE_CLASSES.split(',')
#@ for sc in storage_classes:
      - #@ sc
#@ end
#@ end
      defaultClass: #@ data.values.DEFAULT_STORAGE_CLASS
  topology:
    controlPlane:
      class: #@ data.values.CONTROL_PLANE_VM_CLASS
      count: #@ data.values.CONTROL_PLANE_MACHINE_COUNT
      storageClass: #@ data.values.CONTROL_PLANE_STORAGE_CLASS
    workers:
      class: #@ data.values.WORKER_VM_CLASS
      count: #@ data.values.WORKER_MACHINE_COUNT
      storageClass: #@ data.values.WORKER_STORAGE_CLASS
